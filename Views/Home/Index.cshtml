@{
    ViewBag.Title = "Data Generator";
}

<!-- Title -->
<div class="row pt-3">
    <div class="col text-center">
        <h1 class="text-primary">Sites data manager</h1>
        <p class="text-secondary small">Here we can manage the data that goes into the Bayes classifier.</p>
        <br />
    </div>
</div>
<div class="col">
    <!-- Title for statistics-->
    <div class="row pt-3">
        <div class="col">
            <h2 class="text-primary">Sites</h2>
            <p class="text-secondary small">Manage the list of sites or try the classification tool</p>
            <hr/> 
        </div>
    </div>
</div>
<!-- List of sites -->
<div class="row">
    <div class="col-12">
        <!-- Buttons -->
        <div class="row">
            <div class="col-12">

                <!-- Add button -->
                <button id="addSiteButton" onclick="addSite(this)" class="btn btn-primary">
                    Add
                    <!-- Icon for plus-->
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus-circle" viewBox="0 0 16 16">
                        <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                        <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z"/>
                    </svg>
                </button>

                <!-- Remove button -->
                <button id="removeSiteButton" onclick="removeSite(this)" class="btn btn-primary" disabled>
                    Remove
                    <!-- Icon for minus -->
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-dash-circle" viewBox="0 0 16 16">
                        <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                        <path d="M4 8a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7A.5.5 0 0 1 4 8z"/>
                    </svg>
                </button>

                <!-- Edit button -->
                <button id="editSiteButton" onclick="editSite(this)" class="btn btn-primary" disabled>
                    Edit
                    <!-- Icon for edit -->
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil-square" viewBox="0 0 16 16">
                        <path d="M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z"/>
                        <path fill-rule="evenodd" d="M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5v11z"/>
                    </svg>
                </button>

                <!-- Get text button -->
                <button id="getSiteTextButton" onclick="getSiteText(this)" class="btn btn-secondary" disabled>
                    See text
                    <!-- Icon for text -->
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-blockquote-right" viewBox="0 0 16 16">
                        <path d="M2.5 3a.5.5 0 0 0 0 1h11a.5.5 0 0 0 0-1h-11zm0 3a.5.5 0 0 0 0 1h6a.5.5 0 0 0 0-1h-6zm0 3a.5.5 0 0 0 0 1h6a.5.5 0 0 0 0-1h-6zm0 3a.5.5 0 0 0 0 1h11a.5.5 0 0 0 0-1h-11zm10.113-5.373a6.59 6.59 0 0 0-.445-.275l.21-.352c.122.074.272.17.452.287.18.117.35.26.51.428.156.164.289.351.398.562.11.207.164.438.164.692 0 .36-.072.65-.216.873-.145.219-.385.328-.721.328-.215 0-.383-.07-.504-.211a.697.697 0 0 1-.188-.463c0-.23.07-.404.211-.521.137-.121.326-.182.569-.182h.281a1.686 1.686 0 0 0-.123-.498 1.379 1.379 0 0 0-.252-.37 1.94 1.94 0 0 0-.346-.298zm-2.168 0A6.59 6.59 0 0 0 10 6.352L10.21 6c.122.074.272.17.452.287.18.117.35.26.51.428.156.164.289.351.398.562.11.207.164.438.164.692 0 .36-.072.65-.216.873-.145.219-.385.328-.721.328-.215 0-.383-.07-.504-.211a.697.697 0 0 1-.188-.463c0-.23.07-.404.211-.521.137-.121.327-.182.569-.182h.281a1.749 1.749 0 0 0-.117-.492 1.402 1.402 0 0 0-.258-.375 1.94 1.94 0 0 0-.346-.3z"/>
                    </svg>
                </button>

                <!-- Get html button -->
                <button id="getSiteHtmlButton" onclick="getSiteHtml(this)" class="btn btn-secondary" disabled>
                    See HTML
                    <!-- Icon for html -->
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-filetype-html" viewBox="0 0 16 16">
                        <path fill-rule="evenodd" d="M14 4.5V11h-1V4.5h-2A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v9H2V2a2 2 0 0 1 2-2h5.5L14 4.5Zm-9.736 7.35v3.999h-.791v-1.714H1.79v1.714H1V11.85h.791v1.626h1.682V11.85h.79Zm2.251.662v3.337h-.794v-3.337H4.588v-.662h3.064v.662H6.515Zm2.176 3.337v-2.66h.038l.952 2.159h.516l.946-2.16h.038v2.661h.715V11.85h-.8l-1.14 2.596H9.93L8.79 11.85h-.805v3.999h.706Zm4.71-.674h1.696v.674H12.61V11.85h.79v3.325Z"/>
                    </svg>
                </button>

                <!-- Guess category button -->
                <button id="guessCategoryButton" title="Guess site category" onclick="guessCategory(this)" class="btn btn-success float-end mx-1">
                    Guess
                    <!-- Icon for question mark -->
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-question-circle" viewBox="0 0 16 16">
                        <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                        <path d="M5.255 5.786a.237.237 0 0 0 .241.247h.825c.138 0 .248-.113.266-.25.09-.656.54-1.134 1.342-1.134.686 0 1.314.343 1.314 1.168 0 .635-.374.927-.965 1.371-.673.489-1.206 1.06-1.168 1.987l.003.217a.25.25 0 0 0 .25.246h.811a.25.25 0 0 0 .25-.25v-.105c0-.718.273-.927 1.01-1.486.609-.463 1.244-.977 1.244-2.056 0-1.511-1.276-2.241-2.673-2.241-1.267 0-2.655.59-2.75 2.286zm1.557 5.763c0 .533.425.927 1.01.927.609 0 1.028-.394 1.028-.927 0-.552-.42-.94-1.029-.94-.584 0-1.009.388-1.009.94z"/>
                    </svg>
                </button>
                <!-- Input for a link -->
                <input type="text" style="width: 50%; max-width: 300px;" class="form-control float-end" id="guessSiteInput" placeholder="eg. http://www.site.com">

            </div>
        </div>
      
        <!-- Table -->
        <div class="row">
            <div class="col-12 py-3">
                <table id="sitesTable" class="table">
                    <thead class="bg-dark text-light">
                        <tr>
                            <th scope="col">Id</th>
                            <th scope="col">Site</th>
                            <th scope="col">URL</th>
                            <th scope="col">Categories</th>
                        </tr>
                    </thead>
                </table>
            </div>
        </div>

    </div>
</div>

<!-- Statistics -->
<div class="row" id="statistics">

    <div class="col">
        <!-- Title for statistics-->
        <div class="row pt-3">
            <div class="col">
                <h2 class="text-primary">Statistics</h2>
                <p class="text-secondary small">Section with the latest useful numbers and data overview</p>
                <hr/><br/>
            </div>
        </div>
    </div>
    <div class="row mb-3">
        <div class="col m-3">
            <canvas id="sitesCategoriesFonts" style="max-height: 400px;"></canvas>
        </div>
        <div class="col m-3">
            <canvas id="classifierRelatedNumbers" style="max-height: 400px;"></canvas>
        </div>
    </div>
    <br/>
    <div class="row">
        <div class="col m-3 mt-5">
            <canvas id="categoriesFrequency" style="max-height: 400px;"></canvas>
        </div>
    </div>
    <div class="row">
        <div class="col m-3 mt-5">
            <canvas id="fontsFrequency" style="max-height: 400px;"></canvas>
        </div>
    </div>
    <div class="row">
        <div class="col m-3 mt-5">
            <h5 class="text-primary"> Categories and fonts used in them </h5>

            <table id="categoryFontsTable" class="table display compact">
                <thead class="bg-dark text-light">
                    <tr>
                        <th scope="col">Category</th>
                        <th scope="col">Fonts</th>
                    </tr>
                </thead>
            </table>
        </div>
        <div class="col m-3 mt-5">
            <h5 class="text-primary"> Fonts and categories in which they appear </h5>
            <table id="fontCategoriesTable" class="table display compact">
                <thead class="bg-dark text-light">
                    <tr>
                        <th scope="col">Font</th>
                        <th scope="col">Categories</th>
                    </tr>
                </thead>
            </table>
        </div>
    </div>
</div>

<!-- Templates -->
<template id="addOrEditSite">
    <div class="row">
        <div class="col-12">
            <label for="siteNameInput" class="form-label">Site name</label><br />
            <input type="text" class="form-control" id="siteNameInput" placeholder="eg. Wikipedia"><br />
            <label for="siteUrlInput" class="form-label">URL</label><br />
            <input type="url" class="form-control" id="siteUrlInput" placeholder="eg. https://en.wikipedia.org/wiki/Main_Page"><br />
            <label for="categorySelect" class="form-label">Categories</label><br />
            <select id="categorySelect" class="form-select">
                <option value="Accommodation industry (hotels, resorts)">Accommodation industry (hotels, resorts)</option>
                <option value="Blog">Blog</option>
                <option value="Beauty industry">Beauty industry</option>
                <option value="Community forum">Community forum</option>
                <option value="Education">Education</option>
                <option value="E-commerce">E-commerce</option>
                <option value="Food and beverages industry">Food and beverages industry</option>
                <option value="Government, official site">Government, official site</option>
                <option value="Health care and services">Health care and services</option>
                <option value="News/media">News/media</option>
                <option value="Personal branding/biography">Personal branding/biography</option>
                <option value="Real estate, rental, leasing">Real estate, rental, leasing</option>
                <option value="Search engine">Search engine</option>
                <option value="Social media network">Social media network</option>
                <option value="Video streaming">Video streaming</option>
            </select>
        </div>
    </div>
</template>

@Scripts.Render("~/Scripts/jquery/jquery.min.js")
@Scripts.Render("~/Scripts/bootstrap/bootstrap.min.js")
@Scripts.Render("~/Scripts/dataTables/dataTables.min.js")
@Scripts.Render("~/Scripts/jqueryConfirm/jquery-confirm.min.js")
@Scripts.Render("~/Scripts/select2/select2.min.js")
@Scripts.Render("~/Scripts/dataMining/Classifier.js")
@Scripts.Render("~/Scripts/dataMining/DataGenerator.js")
@Scripts.Render("~/Scripts/dataMining/SiteModel.js")
@Scripts.Render("~/Scripts/dataMining/SiteTextCategory.js")
@Scripts.Render("~/Scripts/chart.js/chart.min.js")

<script type="text/javascript">

    $(document).ready(function () {
        initializeSitesTable();
        getStatistics();
    });

    function initializeSitesTable() {
        // 1. Get data from file -> call to server -> retrieve from file

        const sitesTable = $('#sitesTable').DataTable({
            "order": [[1, "asc"]],
            "ajax": {
                url: '@Url.Action("GetSites","Home")',
                method: 'POST',
                cache: false
            },
            "columns": [
                {
                    "data": 'Id'
                },
                {
                    "data": 'Name',
                    "render": function (data, type, row) {
                        return `<span style="font-weight: 600;">${data}</span>`;
                    }
                },
                {
                    "data": 'Url',
                    "render": function (data, type, row) {
                        return `<a class="fst-italic" style="width: 450px; white-space: nowrap; display: inline-block; overflow:hidden;  text-overflow: ellipsis;" target="_blank" href="${data}">${data}</a>`;
                    }
                },
                {
                    "data": 'Categories',
                    "render": function (data, type, row) {
                        return data.join(",");
                    }
                }
            ],
            "columnDefs": [
                {
                    target: 0,
                    visible: false,
                    searchable: false
                }
            ],
            "drawCallback": function (settings) {
                $("#editSiteButton").prop("disabled", true);
                $("#removeSiteButton").prop("disabled", true);
                $("#getSiteTextButton").prop("disabled", true);
                $("#getSiteHtmlButton").prop("disabled", true);
            },
            select: {
                style: 'single'
            }
        });

        // Handle select/deselect
        sitesTable
            .on('select', function (e, dt, type, indexes) {
                if (type === 'row') {
                    $("#editSiteButton").prop("disabled", false);
                    $("#removeSiteButton").prop("disabled", false);
                    $("#getSiteTextButton").prop("disabled", false);
                    $("#getSiteHtmlButton").prop("disabled", false);
                }
            })
            .on('deselect', function (e, dt, type, indexes) {
                if (type === 'row') {
                    $("#editSiteButton").prop("disabled", true);
                    $("#removeSiteButton").prop("disabled", true);
                    $("#getSiteTextButton").prop("disabled", true);
                    $("#getSiteHtmlButton").prop("disabled", true);
                }
            });
    }

    function removeSite(triggerButton) {

        // 1. Disable button
        $(triggerButton).prop("disabled", true);

        // 2. Get selection
        const sitesTable = $('#sitesTable').DataTable();
        const selectedRow = sitesTable.rows({ selected: true }).data()[0];
        const siteName = selectedRow.Name;

        $.confirm({
            title: `Remove '${siteName}'`,
            content: 'Are you sure you want to remove the site from the list?',
            draggable: false,
            buttons: {
                no: {
                    text: "No",
                    btnClass: "btn btn-secondary",
                    action: function () {
                        // 3. 2. Cancel and enable button
                        $(triggerButton).prop("disabled", false);
                    }
                },
                yes: {
                    text: "Yes",
                    btnClass: "btn btn-success",
                    action: function () {
                        // 3. 1. Delete site and then enable button

                        $.ajax({
                            url: '@Url.Action("RemoveSite","Home")',
                            method: 'POST',
                            data: { siteId: selectedRow.Id },
                            cache: false
                            })
                            .done(function (srvRsp) {
                                if (srvRsp.msg !== "Site successfully deleted.") {
                                    $.alert(srvRsp.msg);
                                } else {
                                    $.alert(srvRsp.msg);
                                    sitesTable.ajax.reload();
                                    getStatistics();
                                }

                                $(triggerButton).prop("disabled", false);
                            })
                            .fail(function (jqXhr, textStatus) {
                                $.alert(`Error ${jqXhr.status}. Site not removed.`);
                                $(triggerButton).prop("disabled", false);
                            });
                    }
                }
            }
        });

        $(triggerButton).prop("disabled", false);

    }

    function editSite(triggerButton) {

        // 1. Disable button
        $(triggerButton).prop("disabled", true);

        // 2. Get selection
        const sitesTable = $('#sitesTable').DataTable();
        const selectedRow = sitesTable.rows({ selected: true }).data()[0];
        const id = selectedRow.Id;
        const siteName = selectedRow.Name;
        const siteUrl = selectedRow.Url;
        const siteCategories = selectedRow.Categories;

        // 3. Get modal content
        const template = document.getElementById("addOrEditSite");
        const editSiteDialog = template.content.cloneNode(true);

        $.confirm({
            title: `Edit '${siteName}'`,
            content: editSiteDialog,
            columnClass: "col-6 col-offset-3",
            draggable: false,
            buttons: {
                cancel: {
                    text: "Cancel",
                    btnClass: "btn btn-secondary",
                    action: function () {
                        // 4. 1. Cancel and enable button
                        $(triggerButton).prop("disabled", false);
                    }
                },
                save: {
                    text: "Save",
                    btnClass: "btn btn-success",
                    action: function () {
                        const siteNewName = $("#siteNameInput").val();
                        const siteNewUrl = $("#siteUrlInput").val();
                        var newCategories = [];

                        $.each($("#categorySelect").select2('data'),
                            function (index, item) {
                                newCategories.push(item.text);
                            });

                        // 4. 2. Save new values and then enable button

                        const newData = {
                            "Id": id,
                            "Name": siteNewName,
                            "Url": siteNewUrl,
                            "Categories": newCategories
                        };

                        if (newData.Name === "" || newData.Name == null || newData.Name == undefined ||
                            newData.Url === "" || newData.Url == null || newData.Url == undefined ||
                            newData.Categories == null || newData.Categories == undefined || newData.Categories.length === 0) {
                            $.alert("Data incomplete. Site cannot be updated.");
                            return false;
                        }


                        $.ajax({
                                url: '@Url.Action("EditSite","Home")',
                                method: 'POST',
                                data: { site: newData },
                                cache: false
                            })
                            .done(function(srvRsp) {
                                if (srvRsp.msg !== "Site successfully updated.") {
                                    $.alert(srvRsp.msg);
                                } else {
                                    $.alert(srvRsp.msg);
                                    sitesTable.ajax.reload();
                                    getStatistics();
                                }

                                $(triggerButton).prop("disabled", false);
                            })
                            .fail(function(jqXhr, textStatus) {
                                $.alert(`Error ${jqXhr.status}. Site not updated.`);
                                $(triggerButton).prop("disabled", false);
                            });

                        $(triggerButton).prop("disabled", false);
                    }
                }
            },
            onContentReady: function() {
                $("#categorySelect").select2({
                    placeholder: "Select an option",
                    allowClear: false,
                    multiple: true
                });
                $("#siteNameInput").val(siteName);
                $("#siteUrlInput").val(siteUrl);
                $('#categorySelect').val(siteCategories).trigger('change');
            }
        });

    }

    function addSite(triggerButton) {

        // 1. Disable button
        $(triggerButton).prop("disabled", true);

        // 2. Get modal content
        const template = document.getElementById("addOrEditSite");
        const addSiteDialog = template.content.cloneNode(true);

        $.confirm({
            title: `Add a new site`,
            columnClass: "col-6 col-offset-3",
            content: addSiteDialog,
            draggable: false,
            buttons: {
                cancel: {
                    text: "Cancel",
                    btnClass: "btn btn-secondary",
                    action: function() {
                        // 3. 1. Cancel and enable button
                        $(triggerButton).prop("disabled", false);
                    }
                },
                save: {
                    text: "Save",
                    btnClass: "btn btn-success",
                    action: function() {
                        // 3. 2. Get new site data

                        const siteName = $("#siteNameInput").val();
                        const siteUrl = $("#siteUrlInput").val();
                        var categories = [];

                        $.each($("#categorySelect").select2('data'),
                            function(index, item) {
                                categories.push(item.text);
                            });

                        // 4. Save new site and then enable button
                        const sitesTable = $('#sitesTable').DataTable();
                        const site = {
                            "Id": 0,
                            "Name": siteName,
                            "Url": siteUrl,
                            "Categories": categories
                        };

                        if (site.Name === "" ||
                            site.Name == null ||
                            site.Name == undefined ||
                            site.Url === "" ||
                            site.Url == null ||
                            site.Url == undefined ||
                            site.Categories == null ||
                            site.Categories == undefined ||
                            site.Categories.length === 0) {
                            $.alert("Data incomplete. Site cannot be added.");
                            return false;
                        }

                        $.ajax({
                                url: '@Url.Action("AddSite", "Home")',
                                method: 'POST',
                                data: { site: site },
                                cache: false
                            })
                            .done(function(srvRsp) {
                                if (srvRsp.msg !== "Site successfully added.") {
                                    $.alert(srvRsp.msg);
                                } else {
                                    $.alert(srvRsp.msg);
                                    sitesTable.ajax.reload();
                                    getStatistics();
                                }

                                $(triggerButton).prop("disabled", false);
                            })
                            .fail(function(jqXhr, textStatus) {
                                $.alert(`Error ${jqXhr.status}. Site not added.`);
                                $(triggerButton).prop("disabled", false);
                            });

                    }
                }
            },
            onContentReady: function() {

                $("#categorySelect").select2({
                    placeholder: "Select an option",
                    allowClear: false,
                    multiple: true
                });
            }
        });

        $(triggerButton).prop("disabled", false);

    }

    function getSiteText(triggerButton) {
        // 1. Disable button
        $(triggerButton).prop("disabled", true);

        // 2. Get selection
        const sitesTable = $('#sitesTable').DataTable();
        const selectedRow = sitesTable.rows({ selected: true }).data()[0];
        const siteUrl = selectedRow.Url;

        // 3. Send data and get text
        $.ajax({
                url: '@Url.Action("GetSiteText", "Home")',
                method: 'POST',
                data: { siteUrl: siteUrl },
                cache: false
            })
            .done(function (srvRsp) {
                if (srvRsp.msg !== "Site text successfully retrieved.") {
                    $.alert(srvRsp.msg);
                }
                else {

                    $.confirm({
                        title: `Retrieved text:`,
                        content: `<div style="overflow-y:scroll;">${srvRsp.text}</div>`,
                        columnClass: "col-6 col-offset-3",
                        draggable: false,
                        buttons: {
                            cancel: {
                                text: "Close",
                                btnClass: "btn btn-secondary",
                                action: function() {
                                    // 4. 1. Close and enable button
                                    $(triggerButton).prop("disabled", false);
                                }
                            }
                        }
                    });
                }

                $(triggerButton).prop("disabled", false);
            })
            .fail(function (jqXhr, textStatus) {
                $.alert(`Error ${jqXhr.status}. Site text could not be retrieved.`);
                $(triggerButton).prop("disabled", false);
            });

    }

    function getSiteHtml(triggerButton) {
        // 1. Disable button
        $(triggerButton).prop("disabled", true);

        // 2. Get selection
        const sitesTable = $('#sitesTable').DataTable();
        const selectedRow = sitesTable.rows({ selected: true }).data()[0];
        const siteUrl = selectedRow.Url;

        // 3. Send data and get text
        $.ajax({
                url: '@Url.Action("GetSiteHtml", "Home")',
                method: 'POST',
                data: { siteUrl: siteUrl },
                cache: false
            })
            .done(function (srvRsp) {
                if (srvRsp.msg !== "Site HTML successfully retrieved.") {
                    $.alert(srvRsp.msg);
                }
                else {
                    const text = srvRsp.html;
                    const encodedStr = text.replace(/[\u00A0-\u9999<>\&]/g, function(i) {
                        return `&#${i.charCodeAt(0)};`;
                    });

                    $.confirm({
                        title: `Retrieved HTML:`,
                        content: `<p style="overflow-y:scroll;">${encodedStr}</p>`,
                        columnClass: "col-6 col-offset-3",
                        draggable: false,
                        buttons: {
                            cancel: {
                                text: "Close",
                                btnClass: "btn btn-secondary",
                                action: function() {
                                    // 4. 1. Close and enable button
                                    $(triggerButton).prop("disabled", false);
                                }
                            }
                        }
                    });
                }

                $(triggerButton).prop("disabled", false);
            })
            .fail(function (jqXhr, textStatus) {
                $.alert(`Error ${jqXhr.status}. Site HTML could not be retrieved.`);
                $(triggerButton).prop("disabled", false);
            });

    }

    function guessCategory(triggerButton) {

        $(triggerButton).prop("disabled", true);

        var siteUrl = $("#guessSiteInput").val();

        if (siteUrl === "" || siteUrl == null || siteUrl == undefined) {
            $.alert("Please type the site URL first.");
            $(triggerButton).prop("disabled", false);
            return false;
        } else {
            $.ajax({
                url: '@Url.Action("GuessSiteCategory", "Home")',
                method: 'POST',
                data: {
                    siteUrl: $("#guessSiteInput").val()
                },
                cache: false
            })
            .done(function(srvRsp) {
                if (srvRsp.msg !== "Ok") {
                    $.alert(srvRsp.msg);
                }
                else {
                    $(triggerButton).prop("disabled", false);

                    const listOfPredictions = srvRsp.predictions;
                    var dataSet = new Array();
                    var labels = new Array();
                    for (let i = 0; i < listOfPredictions.length; i++) {
                        labels.push(listOfPredictions[i].Key);
                        dataSet.push(listOfPredictions[i].Value * 100);
                    }

                    $.confirm({
                        title: `Predicted categories`,
                        content: '<canvas id="chart" width="400" height="400"></canvas>',
                        draggable: false,
                        buttons: {
                            close: {
                                text: "Close",
                                btnClass: "btn btn-secondary",
                                action: function() {}
                            }
                        },
                        onContentReady: function() {
                            // Show chart
                            var ctx = document.getElementById('chart').getContext('2d');
                            var chart = new Chart(ctx,
                                {
                                    type: 'doughnut',
                                    data: {
                                        labels: labels,
                                        datasets: [
                                            {
                                                data: dataSet,
                                                backgroundColor: [
                                                    'rgba(90, 173, 69, 0.65)',
                                                    'rgba(173, 161, 69, 0.65)',
                                                    'rgba(173, 69, 86, 0.65)'
                                                ],
                                                borderColor: [
                                                    'rgba(90, 173, 69, 1)',
                                                    'rgba(173, 161, 69, 1)',
                                                    'rgba(173, 69, 86, 1)'
                                                ],
                                                borderWidth: 2
                                            }
                                        ]
                                    },
                                    options: {
                                        scales: {
                                            y: {
                                                beginAtZero: true
                                            }
                                        }
                                    }
                                });
                        }
                    });

                }
                $(triggerButton).prop("disabled", false);
                $("#guessSiteInput").val('');
            })
            .fail(function(jqXhr, textStatus) {
                $.alert(`Error ${jqXhr.status}. Could not perform the classification.`);
                $(triggerButton).prop("disabled", false);
            });
        }

    }

    function getStatistics() {
        $("#statistics").show();

        $.ajax({
                url: '@Url.Action("GetStatistics", "Home")',
                method: 'POST',
                cache: false
            })
            .done(function(srvRsp) {
                $("#statistics").show();

                _showSitesFontsCategoriesBarChart(srvRsp);
                _showCategoriesFrequency(srvRsp);
                _showFontsFrequency(srvRsp);
                _showClassifierRelatedNumbers(srvRsp);
                _showFontCategoriesList(srvRsp);
                _showCategoryFontsList(srvRsp);
            })
            .fail(function(jqXhr, textStatus) {
               // $.alert(`Error ${jqXhr.status}. Could not get statistics.`);
                $("#statistics").hide();
            });
    }

    function _showSitesFontsCategoriesBarChart(srvRsp) {

        let chartStatus = Chart.getChart("sitesCategoriesFonts");
        if (chartStatus != undefined) {
            chartStatus.destroy();
        }

        var ctx = document.getElementById('sitesCategoriesFonts').getContext('2d');
        new Chart(ctx, {
            type: 'polarArea',
            data: {
                labels: ["Number of sites", "Number of categories", "Number of fonts"],
                datasets: [{
                    data: [srvRsp.data.TotalNumberOfSites, srvRsp.data.TotalNumberOfCategories, srvRsp.data.TotalNumberOfFonts],
                    backgroundColor: [
                        'rgba(173, 158, 40, 0.65)',
                        'rgba(37, 92, 107, 0.65)',
                        'rgba(107, 37, 84, 0.65)'
                    ],
                    borderColor: [
                        'rgba(62, 64, 64, 1)',
                        'rgba(62, 64, 64, 1)',
                        'rgba(62, 64, 64, 1)'
                    ],
                    borderWidth: 2
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                },
                plugins: {
                    legend: {
                        display: true,
                        position: "bottom",
                        labels: {
                            generateLabels: function(chart) {
                                // Get the default label list
                                const original = Chart.overrides.pie.plugins.legend.labels.generateLabels;
                                const labelsOriginal = original.call(this, chart);

                                labelsOriginal[0].text = `${srvRsp.data.TotalNumberOfSites} sites`;
                                labelsOriginal[1].text = `${srvRsp.data.TotalNumberOfCategories} assigned categories`;
                                labelsOriginal[2].text = `${srvRsp.data.TotalNumberOfFonts} found fonts`;

                                return labelsOriginal;
                            }
                        }
                    },
                    title: {
                        display: true,
                        text: 'Number of sites, categories, fonts',
                        font: { size: "16px" },
                        padding: {bottom: 30}
                    }
                }
            }
        });
    }

    function _showCategoriesFrequency(srvRsp) {

        var data = srvRsp.data.CategoryFrequency;
        var categoriesLabels = new Array();
        var categoriesFrequencies = new Array();

        for (let i = 0; i < data.length; i++) {
            categoriesLabels.push(data[i].Item1 + ": " + data[i].Item2);
            categoriesFrequencies.push(data[i].Item2);
        }

        let chartStatus = Chart.getChart("categoriesFrequency");
        if (chartStatus != undefined) {
            chartStatus.destroy();
        }
        var ctx = document.getElementById('categoriesFrequency').getContext('2d');

        new Chart(ctx, {
            type: 'bar',
            data: {
                labels: categoriesLabels,
                datasets: [{
                    data: categoriesFrequencies,
                    backgroundColor: [
                        'rgba(173, 78, 40, 0.65)',
                        'rgba(173, 102, 40, 0.65)',
                        'rgba(173, 124, 40, 0.65)',
                        'rgba(173, 144, 40, 0.65)',
                        'rgba(173, 173, 40, 0.65)',
                        'rgba(104, 173, 40, 0.65)',
                        'rgba(67, 173, 40, 0.65)',
                        'rgba(40, 173, 44, 0.65)',
                        'rgba(40, 173, 84, 0.65)',
                        'rgba(40, 173, 113, 0.65)',
                        'rgba(40, 173, 151, 0.65)',
                        'rgba(40, 173, 173, 0.65)',
                        'rgba(40, 149, 173, 0.65)',
                        'rgba(40, 122, 173, 0.65)'

                    ],
                    borderColor: [
                        'rgba(62, 64, 64, 1)',
                        'rgba(62, 64, 64, 1)',
                        'rgba(62, 64, 64, 1)',
                        'rgba(62, 64, 64, 1)',
                        'rgba(62, 64, 64, 1)',
                        'rgba(62, 64, 64, 1)',
                        'rgba(62, 64, 64, 1)',
                        'rgba(62, 64, 64, 1)',
                        'rgba(62, 64, 64, 1)',
                        'rgba(62, 64, 64, 1)',
                        'rgba(62, 64, 64, 1)',
                        'rgba(62, 64, 64, 1)',
                        'rgba(62, 64, 64, 1)',
                        'rgba(62, 64, 64, 1)'
                    ],
                    borderWidth: 2
                }]
            },
            options: {
                indexAxis: 'y',
                scales: {
                    y: {
                        beginAtZero: true
                    }
                },
                plugins: {
                    legend: {
                        display: false
                    },
                    title: {
                        display: true,
                        text: 'Categories frequency',
                        font: { size: "16px" },
                        padding: { bottom: 30 }
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                let label = `assigned to ${context.label.split(': ')[1]} site`;
                                if (context.label.split(': ')[1] > 1)
                                    label += "s";
                                return label;
                            },
                            title: function (context) {
                                let label = `${context[0].label.split(': ')[0]}`;
                                return label;
                            }
                        }
                    }
                }
            }
        });

    }

    function _showFontsFrequency(srvRsp) {

        var data = srvRsp.data.FontFrequency;
        var fontsLabels = new Array();
        var fontsFrequencies = new Array();

        for (let i = 0; i < data.length; i++) {
            fontsLabels.push(data[i].Item1 + ": " + data[i].Item2);
            fontsFrequencies.push(data[i].Item2);
        }

        var ctx = document.getElementById('fontsFrequency').getContext('2d');
        let chartStatus = Chart.getChart("fontsFrequency");
        if (chartStatus != undefined) {
            chartStatus.destroy();
        }

        new Chart(ctx, {
            type: 'bar',
            data: {
                labels: fontsLabels,
                datasets: [{
                    data: fontsFrequencies,
                    backgroundColor: [
                        'rgba(75, 85, 94, 0.65)',
                        'rgba(110, 125, 138, 0.65)',
                        'rgba(137, 155, 171, 0.65)',
                        'rgba(137, 170, 171, 0.65)',
                        'rgba(96, 136, 138, 0.65)',
                        'rgba(96, 138, 125, 0.65)',
                        'rgba(114, 138, 96, 0.65)',
                        'rgba(125, 138, 96, 0.65)',
                        'rgba(138, 134, 96, 0.65)',
                        'rgba(138, 123, 96, 0.65)',
                        'rgba(138, 113, 96, 0.65)',
                        'rgba(138, 96, 96, 0.65)'
                    ],
                    borderColor: [
                        'rgba(62, 64, 64, 1)',
                        'rgba(62, 64, 64, 1)',
                        'rgba(62, 64, 64, 1)',
                        'rgba(62, 64, 64, 1)',
                        'rgba(62, 64, 64, 1)',
                        'rgba(62, 64, 64, 1)',
                        'rgba(62, 64, 64, 1)',
                        'rgba(62, 64, 64, 1)',
                        'rgba(62, 64, 64, 1)',
                        'rgba(62, 64, 64, 1)',
                        'rgba(62, 64, 64, 1)',
                        'rgba(62, 64, 64, 1)'
                    ],
                    borderWidth: 2
                }]
            },
            options: {
                indexAxis: 'x',
                scales: {
                    y: {
                        beginAtZero: true
                    }
                },
                plugins: {
                    legend: {
                        display: false
                    },
                    title: {
                        display: true,
                        text: 'Fonts frequency',
                        font: { size: "16px" },
                        padding: { bottom: 30 }
                    },
                    tooltip: {
                        callbacks: {
                            label: function (context) {
                                let label = `found in ${context.label.split(': ')[1]} site`;
                                if (context.label.split(': ')[1] > 1)
                                    label += "s";
                                return label;
                            },
                            title: function (context) {
                                let label = `${context[0].label.split(': ')[0]}`;
                                return label;
                            }
                        }
                    }
                }
            }
        });
    }

    function _showClassifierRelatedNumbers(srvRsp) {

        let chartStatus = Chart.getChart("classifierRelatedNumbers");
        if (chartStatus != undefined) {
            chartStatus.destroy();
        }

        var ctx = document.getElementById('classifierRelatedNumbers').getContext('2d');
        const data = {
            labels: ["Total number of words", "Total number of unique words", "Number of used categories", "Number of (site,category) pairs", "Accuracy"],
            datasets: [
                {
                    backgroundColor: ['rgba(21, 96, 100, 0.65)', 'rgba(36, 162, 168, 0.65)'],
                    borderColor: 'rgba(62, 64, 64, 1)',
                    data: [srvRsp.data.ClassifierTotalNumberOfWords, srvRsp.data.ClassifierTotalNumberOfUniqueWords]
                },
                {
                    backgroundColor: ['rgba(247, 187, 59, 0.65)', 'rgba(248, 225, 108, 0.65)'],
                    data: [srvRsp.data.ClassifierTotalNumberOfClasses, srvRsp.data.ClassifierTotalNumberOfSiteCategoryPairs],
                    borderColor: 'rgba(62, 64, 64, 1)'
                },
                {
                    backgroundColor: ['rgba(251, 143, 103, 0.65)'],
                    data: [srvRsp.data.ClassifierAccuracy],
                    borderColor: 'rgba(62, 64, 64, 1)'
                }
            ]
        };

        const config = {
            type: 'pie',
            data: data,
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        labels: {
                            generateLabels: function(chart) {
                                // Get the default label list
                                const original = Chart.overrides.pie.plugins.legend.labels.generateLabels;
                                const labelsOriginal = original.call(this, chart);

                                // Build an array of colors used in the datasets of the chart
                                var datasetColors = chart.data.datasets.map(function(e) {
                                    return e.backgroundColor;
                                });
                                datasetColors = datasetColors.flat();

                                // Modify the color and hide state of each label
                                labelsOriginal.forEach(label => {
                                    // There are twice as many labels as there are datasets. This converts the label index into the corresponding dataset index
                                    label.datasetIndex = (label.index - label.index % 2) / 2;

                                    // The hidden state must match the dataset's hidden state
                                    label.hidden = !chart.isDatasetVisible(label.datasetIndex);

                                    // Change the color to match the dataset
                                    label.fillStyle = datasetColors[label.index];
                                });

                                labelsOriginal[0].text = `${srvRsp.data.ClassifierTotalNumberOfWords} words in total`;
                                labelsOriginal[1].text = `${srvRsp.data.ClassifierTotalNumberOfUniqueWords} unique words`;
                                labelsOriginal[2].text = `${srvRsp.data.ClassifierTotalNumberOfClasses} used categories`;
                                labelsOriginal[3].text = `${srvRsp.data.ClassifierTotalNumberOfSiteCategoryPairs} [site, category] pairs`;
                                labelsOriginal[4].text = `${srvRsp.data.ClassifierAccuracy}% accuracy`;

                                return labelsOriginal;
                            }
                        },
                        onClick: function(mouseEvent, legendItem, legend) {
                            // toggle the visibility of the dataset from what it currently is
                            legend.chart.getDatasetMeta(legendItem.datasetIndex).hidden = legend.chart.isDatasetVisible(legendItem.datasetIndex);
                            legend.chart.update();
                        }
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                const labelIndex = (context.datasetIndex * 2) + context.dataIndex;
                                return context.chart.data.labels[labelIndex] + ': ' + context.formattedValue;
                            }
                        }
                    },
                    title: {
                        display: true,
                        text: 'Classifier data',
                        font: { size: "16px" },
                        padding: { bottom: 15 }
                    }
                }
            }
        };
        new Chart(ctx, config);
    }

    function _showFontCategoriesList(srvRsp) {

        const data = srvRsp.data.FontCategoryList;
        var adaptedData = new Array();
        for (let key in data) {
            if (Object.prototype.hasOwnProperty.call(data, key)) {
                const value = data[key];
                const d = {
                    "Font": key,
                    "Categories": value
                };
                adaptedData.push(d);
            }
        }

        var fontCategoriesTbl = $("#fontCategoriesTable").DataTable();
        fontCategoriesTbl.destroy();
        fontCategoriesTbl = $("#fontCategoriesTable").DataTable({
            "order": [[0, "asc"]],
            "data": adaptedData,
            "columns" : [
                { "data": "Font" },
                {
                    "data": "Categories",
                    "render": function (_, __, row) {
                        var html = "<ul>";
                        
                        for (let c in row.Categories) {
                            html += `<li>${row.Categories[c]}</li>`;
                        }
                        html += "</ul>";
                        return html;
                    }
                }
            ]
        });

    }

    function _showCategoryFontsList(srvRsp) {
       const data = srvRsp.data.CategoryFontsList;
        var adaptedData = new Array();
        for (let key in data) {
            if (Object.prototype.hasOwnProperty.call(data, key)) {
                const value = data[key];
                const d = {
                    "Category": key,
                    "Fonts": value
                };
                adaptedData.push(d);
            }
        }

        var categoryFontsTbl = $("#categoryFontsTable").DataTable();
        categoryFontsTbl.destroy();
        categoryFontsTbl = $("#categoryFontsTable").DataTable({
            "order": [[0, "asc"]],
            "data": adaptedData,
            "columns": [
                { "data": "Category" },
                {
                    "data": "Fonts",
                    "render": function (_, __, row) {
                        var html = "<ul>";

                        for (let c in row.Fonts) {
                            html += `<li>${row.Fonts[c]}</li>`;
                        }
                        html += "</ul>";
                        return html;
                    }
                }
            ]
        });

    }

</script>